

Selenium WebDriver
======================
Selenium WebDriver is an Interface

WebDriver is an API to automate WEBUI of application

=============================================================
SetUp
===========
1.Using Java project
======================
1.create new java project
2.download selenium  jar-selenium.dev
3.right click ob project-->build path--->configure build path--->libraries
--->class path-->add external jar--->attach jar--->apply


==================================
2.Using Maven Project
=============================
2.create Maven project


Maven 
===============
Maven is build management and Project management tool

Maven has one cofiguration file
POM.xml file
======================
Project Object Model  file 
its a configuration file where we can setup complete maven project
POM .xml we need to add required dependecies related to our project
selenium dependency

what is dependency
======================
It is an executable file
It is library
=================
<project>

<dependencies>

	<dependecy>Selenium</dependecy>
</dependencies>

</project>

===========================
Maven Support two types Repository
===================================
1.Local Repo
===================
C://users--->.m2 folder

2.Central/Remote Repo
========================
mvnrepository.com
========================================================
27-02-2025
=================
WebDriver Browser based commands
==================================
1.get(url): Open application
2.getTitle(): get the current title of the page
3.getPageSource(): get the page source code of any page
4.getCurrentUrl(): get the current url og the application

Window handling
===================
5.getWindowHandle()
6.getWindowHandles()

7.close(): close the current active browser window
8.quit(): close all open windows by selenium

===================================================

Selenium Exception
=====================
1.org.openqa.selenium.InvalidArgumentException: invalid argument
when url address is incorrect(missed protocol)
2.NoSuchElementException: no such element
when findElement() fail to identify webelement
3.ElementNotInteractableException: element not interactable (size issue)
4.UnhandledAlertException: unexpected alert open(skip alert then you will get it)
5:StaleElementReferenceException: stale element reference: stale element not found
When Dom is refreshed and element is not loaded then you will get this exception
=========================================================
Navigation Commands in Selenium
===================================
Selenium provides one Navigation interface

1.to(url):navigate to url/app
===============

driver.navigate().to(url)

2.back()
======================
driver.navigate().back()


3.forward()
======================
driver.navigate().forward()

4.refresh()
==================
driver.navigate().refresh()

========================================================
28-02-2025
=================
What is WebElement?
======================
Every GUI(button,link,textbox,dropdown,checkbox..etc) of application is called WebElement
In Technical word WebElement is interface in selenium to 
interact with any GUI element

How to automate any WebElement?
==================================
1.Identify WebElement from WebPage
2.Perform action on WebElement

How selenium identify any webelement
===========================================
To identify WebElement selenium uses Locators

What is Locator?
--------------------
Locator is address of WebElement from Webpage

Selenium support total 8 locators
==================================
1.By id (primary)
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.BY tagName

dynamic locators
==================
7.By cssSelector
8.By xpath

What is By
================
It is class in selenium

Selenium 4 RelativeLocators
=============================


==========================================================
1.get the element address using locator
2.to idetify it from selenium we use method

1.findElement()
==================
-findElement() identifies single WebElement
-findElement() returns WebElement interface object
-findElement() fail to identify any webelement then it throws exception NoSuchElementException


2.findElements()
==================
-findElements() identifies multiple webElements
-this method returns List<WebElement>
-If element not found this method never throws any exception


=======================================
WebElement commands
========================

validation
---------------
1.isDisplayed()
2.isEnabled()
3.isSelected()


Element Action
================
link,button,checkbox,radiobutton-->click--->click()
textbox,searchbox--->enter data--->sendKeys("data",Keys.ENTER);

========================================
How to automate any hyperlink/link
--------------------------------------

<a class="nav-link" href="login.html">Sign In</a>
								<a>		Link Text		</a>
1.By linkText(full text)
--------------------------------
driver.findElement(By.linkText("Sign In")).click()


2.By partialLinkText(partial text)
-----------------------------------
driver.findElement(By.partialLinkText("In")).click();

==============================================
By className
================
class="btn btn-default btn-primary"
		c1		c2			c3
		
InvalidSelectorException: Compound class names not permitted

From dev tool open finder-->ctrl+F
identify unique class name and use it for automation

======================================================
3-03-2025
=============
By tagName
=============
Number of input boxes
Number of images
Number of Buttons
Number of Links

============================================
Synchronization Issue:
============================
Whenever there is time mapping problem with tool and application
(Application sometimes need some extra time to load every webelement)

Static Wait
==============
Thread.sleep(2000);

Dynamic Wait
===================
1.Implicit
============
-Implicit wait is global wait
-It is applicable to all webelement in script
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

===========================
2.Explicit Wait
=================
- It is not global, this wait applicable to every single webelement
- As per condition we can identify element and apply wait

1.WebDriverWait class
2.Fluent Wait class

WebDriverWait(c) extends FluentWait(c)implements Wait(I)
-
=============================================================

WebElement IMP commands
=============================
1.getText():String
=====================
-Any visible text from application it will capture
-inner html text also it will return

2.getAttribute(Attributename):4.28.0 deprecated--->getDomAttribute(attribute)
=========================================================================
- this commands return value for that attribute

Dynamic Locators
========================
1.By cssSelector
2.By xpath

1.By cssSelector
=====================
CSS cascaded style sheet
It is a language which provide style to Webelement

CssSelector is Locator which identify elements based 
on css properties of webelement
CssSelector is faster than xpath as cssSelector travel only in one direction
parent to child



1.tagname with id
-------------------------
#input-email
Syntax:
===========
tagname#id
input#input-email
-----------------------------------------
2.tagname with attribute
------------------------------
Syntax:
-------------
tagname[attributename='value']

input[placeholder='Password']

3.tagname with className
==============================
Syntax:
======
tagname.className

<input class="btn btn-primary">
input.btn.btn-primary

orangehrm login button
----------------------------
oxd-button oxd-button--medium oxd-button--main orangehrm-login-button

button.oxd-button

----------------------------------------------
4.combination id,classname,attribute
-------------------------------------
Syntax:
===============
tagname#id.classname[attribute='value']

orangehrm login button
----------------------------
button.oxd-button[type='submit']

=======================================================================
4-03-2025
===============
8.By xpath
==============
-Xpath is path of the webelement from html/xml document
-xpath will help you to identify element from html DOM(document object Model)
-xpath support multiple methods
-xpath travel in both direction (xpath Axies)

=================================
HTML DOM
============
<html>--------------------root element/node
<head>

</head>

<body>
<input>
<a>----------------------element
<div>

</body>
</html>

===============================================
Types of Xpath
===========
1.Absolute xpath(full path)
----------------------------------
-Absolute xpath always starts with root node
-Absolute xpath always starts with '/'

/html/body/div[2]/div/div/div/div[2]/div/form/div[1]/input

2.Relative Xpath(partial path)
---------------------------------------
-Relative xpath identify element by its relative property
-Relative xpath always starts with '//'

//*[@id="input-email"]
*: All

Syntax:
=============
//tagame[@attributename='value']

=============================
xpath with indexing
========================
Syntax:
==========
(xpath)[index number]
position()
----------------
(xpath)[position()=indexnumber]


==================================================
6-3-2025
===============
xpath methods
===========
1.text()
=============
- it identify element by its visible text
- It will not work with white space
Syntax
===========
//tagname[text()='text']
----------------------------------------------
2.normalize-space()
======================
- it identify element by its visible text
- It will ignorew hite space like trim() of String  class

Syntax:
==========
//tagname[normalize-space()='text']
---------------------------------------------
3.contains():partial match
===============
Syntax:
===========
//tagname[contains(@attribute,'partial value')]

OR

//tagname[contains(text(),'partial text')]

4.starts-with():prefix value
==================================
Syntax:
===========
//tagname[starts-with(@attribute,'prefix value')]

OR

//tagname[starts-with(text(),'prefix text')]

========================================================
Xpath Axies
==================
  <tbody>-----Grand parent for John
 
     <tr>------Parent for John
 
         <td>4</td>-----preceding sibling for john

          <td>John</td>--------Element

          <td>Robinson</td>---following siblings for john

          <td>jr5527</td>
 
         <td>
              <a href="user.html"><i class="icon-pencil"></i></a>
              <a role="button" href="#myModal" data-toggle="modal"><i class="icon-remove"></i></a>
          </td>

        </tr>
</tbody>
========
=======================
1.Ancestor(gp)
================
Syntax:
============
//tagname[@attribute='value']//ancestor::tagname of ancestor

2.parent
================
Syntax:
============
//tagname[@attribute='value']//parent::tagname of parent

3.child
===================
================
Syntax:
============
//tagname[@attribute='value']//child::tagname of child

4.Following(all after nodes)
================
================
Syntax:
============
//tagname[@attribute='value']//following::tagname of follwing ele

5.following-sibling
================
Syntax:
============
//tagname[@attribute='value']//following-sibling::tagname of sibling ele


6.preceding(all previous nodes)
================
================
Syntax:
============
//tagname[@attribute='value']//preceding::tagname of preceding ele

7.preceding-sibling
================
Syntax:
============
//tagname[@attribute='value']//preceding-sibling::tagname of sibling ele



================================================
7-03-2025
=============
1.Dropdown Automation
===================
1.Select tag based dropdown
=============================

Selenium provides Select class
Select dd=new Select(dropdownElement address);

Is dropdown supported multiple selection
isMultiple():boolean

Select single value
------------------
1.selectByIndex()
2.selectByValue()
3.selectByVisibleText()


get all the options from the dropdown
----------------------------
getOptions():List<WebElement>



2.Bootstrap/Autosuggession/Javascript
=================================
use appropriate locator and automate
===================================================
JavascriptExecutor
=========================
JavascriptExecutor is interface in Selenium
Scroll the page
------------------
===========================
10-03-2025
=============
2.Window/tab Handling In Selenium
----------------------------
1.getWindowHandle(): String: Parent/Active Window session Id
2.getWindowHandles(): Set<String>: all open windows session Ids
3.switchTo():target(window/alert/frame)

selenium 4 :New window or any new tab
--------------------------------
newWindow():WebDriver interface ref

driver.switchTo().newWindow(WindowType.TAB);
driver.switchTo().newWindow(WindowType.WINDOW);
=====================================

3.Alerts 
=============
Alert is small window coming from browser

To handle alert Selenium provides Alert Interface

1.switch to alert then handle
-------------------------
driver.switchTo().alert();

3 Types of alerts
======================
1.Basic alert with Ok button
2.Confirmation alert
3.Prompt Alert 

This interface provides 4 methods
---------------------------------
1.To get text of the alert: getText()
2.To perform click on OK: accept()
3.To perform click on Cancel: dismiss()
4.To enter any text: sendKeys()
=========================================
How to automate Basic Authentication in Selenium
--------------------------------------------
URL: https://username:password@www.domain.com
==============================================
11-03-2025
===========
4.Frame/IFrame
====================
One html document embedded in another html doucment is called frame/iframe

<frame> or <iframe>

1.frame with index
-------------------------
driver.switchTo().frame(index);

2.frame with id/name
-------------------------
driver.switchTo().frame(id/name);

3.frame with WebElement
------------------------------
- identify frame as webelement
- switch to that frame

driver.switchTo().frame( framewebElement);

Nested Frame
======================
1.To switch to main Document or first frame
driver.switchTo().defualtContent()

2.To Switch to immediate parent frame
driver.switchTo().parentFrame()
==========================================================
9.Actions Class
===================
Mouse Operations
1.right click
2.double click
3.drag and drop
4.mouse over: moveToElement()
5.slider

=========================================================
13-03-2025
============
5.WebTable Handling
===================
scenario
----------
Number of Rows
Number of Columns
Number of Heading/print
Specific row
specific column
get all the data of table

============================================================
6.JavaScriptExecutor
done

7.Selenium Waits
========================
Default timeout for Implicit wait: 0
Default PageLoad timeout: 5mins

Synchronization Issue:
============================
Whenever there is time mapping problem with tool and application
(Application sometimes need some extra time to load every webelement)

Static Wait
==============
Thread.sleep(2000);

Dynamic Wait
===================
1.Implicit
============
-Implicit wait is global wait
-It is applicable to all webelement in script
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

===========================
2.Explicit Wait
=================
- It is not global, this wait applicable to every single webelement
- As per condition we can identify element and apply wait

1.WebDriverWait class
2.Fluent Wait class

WebDriverWait(c) extends FluentWait(c)implements Wait(I)
================================================================
17-03-2025
================
8.Capabilities & Headless Testing
=====================================
Capabilities will help to customize any browser driver session

Capabilities are options that you can use
 to customize and configure a ChromeDriver session.
 
chrome==>ChromeOptions class
edge==>EdgeOptions class
firefox=> FirefoxOptions class


headless testing
======================
Selenium 3:
--------------
HtmlUnitDriver 

selenium 4
--------------
capability option= --headless


File upload using Robot Class
==================================
import java.awt.datatransfer.StringSelection;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.time.Duration;
import java.awt.AWTException;
import java.awt.Robot;

//clipboard step ctrl+c
StringSelection sc=new StringSelection("file path");
Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sc,null);

//ctrl+V
 //keypress
	keyPress(KeyEvent.VK_CONTROL);
	keyPress(KeyEvent.VK_V);
	  
//key release
	keyRelease(KeyEvent.VK_CONTROL);
	keyRelease(KeyEvent.VK_V); 

Meaning
-----------
1.StringSelection sc = new StringSelection("file path");
StringSelection is a class in Java that implements the Transferable interface,
which represents data that can be transferred to and from the clipboard.
In this line, a new StringSelection object sc is created with the string
"file path". This is the text that you want to copy to the clipboard.
Replace "file path" with the actual file path or string you want to copy.
 
2.Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sc,null);
Toolkit.getDefaultToolkit() retrieves the default Toolkit object
 for the current environment, which provides a variety of
  utility methods, including access to the system clipboard.
getSystemClipboard() gives access to the system clipboard.
setContents(sc, null) 
copies the contents of the StringSelection 
(the file path, in this case) to the clipboard.
 The second argument (null) is a ClipboardOwner that is usually used to specify an object that will take care of the data if it's replaced, 
but it can be null if you don't need that functionality.
summary:
This code copies the string "file path" to the system clipboard, 
so you can then paste it anywhere (e.g., in a text editor, file explorer, etc.). 
You can modify "file path" to be any string or file path that you wish to copy.

FrameWorks
================
1.TestNG
===================

TestNG Parameters
========================
1.priority: to execute test in sequence
2.description: to give details about test
3.timeOut:set the test case execution 
4.invocationCount: to run test case for number of time
4.enabled:
5.dependesOnMethods:

Testng.xml file
==================
<suite name="Suite">:  collection of tests
  <test thread-count="5" name="Test">: collection of classes
    <classes>
      <class name="com.TestNG.BasicScenario.TestDemo5_Usingxmldisabletest">
      @Test chrome:Method
      @Test firefox: method
      @Test edge:method
      
      <methods>
      <include name=""/>: include /add test in execution
      <exclude name="firefox"/> : exclude /remove/disable test from current execution
      </methods>
      
      </class>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->

How to disable any test from current execution
============================================
1.using enabled=false parameter
2.using testng.xml file

How to run only fail testcase
================================
refresh the project--->open test-output folder--->open testng-failed.xml file
and run this will run only fail test case

TestNG Assertion
======================
1.Hard assertion
====================
Assert class-it has all static method

1.assertEquals(c1,c2):true,true==>pass otherwise fail
2.assertTrue(c1): true===>pass otherwise fail
3.assertFalse(c1):false===>pass otherwise fails

2.SoftAssertion
==================
SoftAssert: it doen't have any static method

=================================
20-03-2025
================
TestNG Annotation(Rules)
=======================
prerequisite/precoditions
==================
@BeforeSuite
@BeforeTest
@BeforeClass
@BeforeMethod

Postconditons
==================
@AfterSuite
@AfterTest
@AfterClass
@AfterMethod


PageObject Model(Design pattern)
--------------------------------
- It is design Pattern
- using page object we can implement Object repository in selenium

- Ways
==========
1. Using By Locator(Without PageFactory)
2. Using PageFactory class



TestNG Data Passing
=====================
1.Using .xml file
2.Using Properties file


Data Driven Testing


Hybrid framework design
-------------------------


Cucumber










2.Hybrid 

3.Cucumber










































