

Selenium WebDriver
======================
Selenium WebDriver is an Interface

WebDriver is an API to automate WEBUI of application

=============================================================
SetUp
===========
1.Using Java project
======================
1.create new java project
2.download selenium  jar-selenium.dev
3.right click ob project-->build path--->configure build path--->libraries
--->class path-->add external jar--->attach jar--->apply


==================================
2.Using Maven Project
=============================
2.create Maven project


Maven 
===============
Maven is build management and Project management tool

Maven has one cofiguration file
POM.xml file
======================
Project Object Model  file 
its a configuration file where we can setup complete maven project
POM .xml we need to add required dependecies related to our project
selenium dependency

what is dependency
======================
It is an executable file
It is library
=================
<project>

<dependencies>

	<dependecy>Selenium</dependecy>
</dependencies>

</project>

===========================
Maven Support two types Repository
===================================
1.Local Repo
===================
C://users--->.m2 folder

2.Central/Remote Repo
========================
mvnrepository.com
========================================================
27-02-2025
=================
WebDriver Browser based commands
==================================
1.get(url): Open application
2.getTitle(): get the current title of the page
3.getPageSource(): get the page source code of any page
4.getCurrentUrl(): get the current url og the application

Window handling
===================
5.getWindowHandle()
6.getWindowHandles()

7.close(): close the current active browser window
8.quit(): close all open windows by selenium

===================================================

Selenium Exception
=====================
1.org.openqa.selenium.InvalidArgumentException: invalid argument
when url address is incorrect(missed protocol)
2.NoSuchElementException: no such element
when findElement() fail to identify webelement
3.ElementNotInteractableException: element not interactable (size issue)
4.UnhandledAlertException: unexpected alert open(skip alert then you will get it)
5:StaleElementReferenceException: stale element reference: stale element not found
When Dom is refreshed and element is not loaded then you will get this exception
=========================================================
Navigation Commands in Selenium
===================================
Selenium provides one Navigation interface

1.to(url):navigate to url/app
===============

driver.navigate().to(url)

2.back()
======================
driver.navigate().back()


3.forward()
======================
driver.navigate().forward()

4.refresh()
==================
driver.navigate().refresh()

========================================================
28-02-2025
=================
What is WebElement?
======================
Every GUI(button,link,textbox,dropdown,checkbox..etc) of application is called WebElement
In Technical word WebElement is interface in selenium to 
interact with any GUI element

How to automate any WebElement?
==================================
1.Identify WebElement from WebPage
2.Perform action on WebElement

How selenium identify any webelement
===========================================
To identify WebElement selenium uses Locators

What is Locator?
--------------------
Locator is address of WebElement from Webpage

Selenium support total 8 locators
==================================
1.By id (primary)
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.BY tagName

dynamic locators
==================
7.By cssSelector
8.By xpath

What is By
================
It is class in selenium

Selenium 4 RelativeLocators
=============================


==========================================================
1.get the element address using locator
2.to idetify it from selenium we use method

1.findElement()
==================
-findElement() identifies single WebElement
-findElement() returns WebElement interface object
-findElement() fail to identify any webelement then it throws exception NoSuchElementException


2.findElements()
==================
-findElements() identifies multiple webElements
-this method returns List<WebElement>
-If element not found this method never throws any exception


=======================================
WebElement commands
========================

validation
---------------
1.isDisplayed()
2.isEnabled()
3.isSelected()


Element Action
================
link,button,checkbox,radiobutton-->click--->click()
textbox,searchbox--->enter data--->sendKeys("data",Keys.ENTER);

========================================
How to automate any hyperlink/link
--------------------------------------

<a class="nav-link" href="login.html">Sign In</a>
								<a>		Link Text		</a>
1.By linkText(full text)
--------------------------------
driver.findElement(By.linkText("Sign In")).click()


2.By partialLinkText(partial text)
-----------------------------------
driver.findElement(By.partialLinkText("In")).click();

==============================================
By className
================
class="btn btn-default btn-primary"
		c1		c2			c3
		
InvalidSelectorException: Compound class names not permitted

From dev tool open finder-->ctrl+F
identify unique class name and use it for automation

======================================================
3-03-2025
=============
By tagName
=============
Number of input boxes
Number of images
Number of Buttons
Number of Links

============================================
Synchronization Issue:
============================
Whenever there is time mapping problem with tool and application
(Application sometimes need some extra time to load every webelement)

Static Wait
==============
Thread.sleep(2000);

Dynamic Wait
===================
1.Implicit
============
-Implicit wait is global wait
-It is applicable to all webelement in script
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

===========================
2.Explicit Wait
=================
- It is not global, this wait applicable to every single webelement
- As per condition we can identify element and apply wait

1.WebDriverWait class
2.Fluent Wait class

WebDriverWait(c) extends FluentWait(c)implements Wait(I)

pending......
=============================================================

WebElement IMP commands
=============================
1.getText():String
=====================
-Any visible text from application it will capture
-inner html text also it will return

2.getAttribute(Attributename):4.28.0 deprecated--->getDomAttribute(attribute)
=========================================================================
- this commands return value for that attribute

Dynamic Locators
========================
1.By cssSelector
2.By xpath

1.By cssSelector
=====================
CSS cascaded style sheet
It is a language which provide style to Webelement

CssSelector is Locator which identify elements based 
on css properties of webelement
CssSelector is faster than xpath as cssSelector travel only in one direction
parent to child



1.tagname with id
-------------------------
#input-email
Syntax:
===========
tagname#id
input#input-email
-----------------------------------------
2.tagname with attribute
------------------------------
Syntax:
-------------
tagname[attributename='value']

input[placeholder='Password']

3.tagname with className
==============================
Syntax:
======
tagname.className

<input class="btn btn-primary">
input.btn.btn-primary

orangehrm login button
----------------------------
oxd-button oxd-button--medium oxd-button--main orangehrm-login-button

button.oxd-button

----------------------------------------------
4.combination id,classname,attribute
-------------------------------------
Syntax:
===============
tagname#id.classname[attribute='value']

orangehrm login button
----------------------------
button.oxd-button[type='submit']

=======================================================================
4-03-2025
===============
8.By xpath
==============
-Xpath is path of the webelement from html/xml document
-xpath will help you to identify element from html DOM(document object Model)
-xpath support multiple methods
-xpath travel in both direction (xpath Axies)

=================================
HTML DOM
============
<html>--------------------root element/node
<head>

</head>

<body>
<input>
<a>----------------------element
<div>

</body>
</html>

===============================================
Types of Xpath
===========
1.Absolute xpath(full path)
----------------------------------
-Absolute xpath always starts with root node
-Absolute xpath always starts with '/'

/html/body/div[2]/div/div/div/div[2]/div/form/div[1]/input

2.Relative Xpath(partial path)
---------------------------------------
-Relative xpath identify element by its relative property
-Relative xpath always starts with '//'

//*[@id="input-email"]
*: All

Syntax:
=============
//tagame[@attributename='value']

=============================
xpath with indexing
========================
Syntax:
==========
(xpath)[index number]
position()
----------------
(xpath)[position()=indexnumber]


==================================================
6-3-2025
===============
xpath methods
===========
1.text()
=============
- it identify element by its visible text
- It will not work with white space
Syntax
===========
//tagname[text()='text']
----------------------------------------------
2.normalize-space()
======================
- it identify element by its visible text
- It will ignorew hite space like trim() of String  class

Syntax:
==========
//tagname[normalize-space()='text']
---------------------------------------------
3.contains():partial match
===============
Syntax:
===========
//tagname[contains(@attribute,'partial value')]

OR

//tagname[contains(text(),'partial text')]

4.starts-with():prefix value
==================================
Syntax:
===========
//tagname[starts-with(@attribute,'prefix value')]

OR

//tagname[starts-with(text(),'prefix text')]

========================================================
Xpath Axies
==================
  <tbody>-----Grand parent for John
 
     <tr>------Parent for John
 
         <td>4</td>-----preceding sibling for john

          <td>John</td>--------Element

          <td>Robinson</td>---following siblings for john

          <td>jr5527</td>
 
         <td>
              <a href="user.html"><i class="icon-pencil"></i></a>
              <a role="button" href="#myModal" data-toggle="modal"><i class="icon-remove"></i></a>
          </td>

        </tr>
</tbody>
========
=======================
1.Ancestor(gp)
================
Syntax:
============
//tagname[@attribute='value']//ancestor::tagname of ancestor

2.parent
================
Syntax:
============
//tagname[@attribute='value']//parent::tagname of parent

3.child
===================
================
Syntax:
============
//tagname[@attribute='value']//child::tagname of child

4.Following(all after nodes)
================
================
Syntax:
============
//tagname[@attribute='value']//following::tagname of follwing ele

5.following-sibling
================
Syntax:
============
//tagname[@attribute='value']//following-sibling::tagname of sibling ele


6.preceding(all previous nodes)
================
================
Syntax:
============
//tagname[@attribute='value']//preceding::tagname of preceding ele

7.preceding-sibling
================
Syntax:
============
//tagname[@attribute='value']//preceding-sibling::tagname of sibling ele



================================================
7-03-2025
=============
1.Dropdown Automation
===================
1.Select tag based dropdown
=============================

Selenium provides Select class
Select dd=new Select(dropdownElement address);

Is dropdown supported multiple selection
isMultiple():boolean

Select single value
------------------
1.selectByIndex()
2.selectByValue()
3.selectByVisibleText()


get all the options from the dropdown
----------------------------
getOptions():List<WebElement>



2.Bootstrap/Autosuggession/Javascript
=================================
use appropriate locator and automate
===================================================
JavascriptExecutor
=========================
JavascriptExecutor is interface in Selenium
Scroll the page
------------------
===========================
10-03-2025
=============
2.Window/tab Handling In Selenium
----------------------------
1.getWindowHandle(): String: Parent/Active Window session Id
2.getWindowHandles(): Set<String>: all open windows session Ids
3.switchTo():target(window/alert/frame)

selenium 4 :New window or any new tab
--------------------------------
newWindow():WebDriver interface ref

driver.switchTo().newWindow(WindowType.TAB);
driver.switchTo().newWindow(WindowType.WINDOW);
=====================================

3.Alerts 
=============
Alert is small window coming from browser

To handle alert Selenium provides Alert Interface

1.switch to alert then handle
-------------------------
driver.switchTo().alert();

3 Types of alerts
======================
1.Basic alert with Ok button
2.Confirmation alert
3.Prompt Alert 

This interface provides 4 methods
---------------------------------
1.To get text of the alert: getText()
2.To perform click on OK: accept()
3.To perform click on Cancel: dismiss()
4.To enter any text: sendKeys()
=========================================
How to automate Basic Authentication in Selenium
--------------------------------------------
URL: https://username:password@www.domain.com
==============================================
11-03-2025
===========
4.Frame/IFrame
====================
One html document embedded in another html doucment is called frame/iframe

<frame> or <iframe>

1.frame with index
-------------------------
driver.switchTo().frame(index);

2.frame with id/name
-------------------------
driver.switchTo().frame(id/name);

3.frame with WebElement
------------------------------
- identify frame as webelement
- switch to that frame

driver.switchTo().frame( framewebElement);

Nested Frame
======================
1.To switch to main Document or first frame
driver.switchTo().defualtContent()

2.To Switch to immediate parent frame
driver.switchTo().parentFrame()
==========================================================
9.Actions Class
===================
Mouse Operation
1.rightclick
2.double click
3.drag and drop
4.mouse over: moveToElement()
5.slider

=========================================================
5.WebTable Handling

6.JavaScriptExecutor
done

7.Selenium Waits

8.Capabilities & Headless Testing


FrameWorks
================
1.TestNG

2.Hybrid 

3.Cucumber










































